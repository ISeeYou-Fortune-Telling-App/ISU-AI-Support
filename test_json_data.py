#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu t·ª´ file JSON
"""

import requests
import json

def test_json_data_queries():
    """Test c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn d·ªØ li·ªáu JSON"""
    
    base_url = "http://localhost:8000"
    
    test_cases = [
        {
            "question": "Tr·∫≠n Austerlitz l√† g√¨?",
            "description": "H·ªèi v·ªÅ tr·∫≠n chi·∫øn t·ª´ JSON data",
            "expect_json": True
        },
        {
            "question": "Napoleon c√≥ nh·ªØng t∆∞·ªõng th·∫ßn c·∫≠n n√†o?",
            "description": "H·ªèi v·ªÅ th·∫ßn c·∫≠n t·ª´ JSON data", 
            "expect_json": True
        },
        {
            "question": "Tr·∫≠n Waterloo di·ªÖn ra khi n√†o?",
            "description": "H·ªèi v·ªÅ tr·∫≠n chi·∫øn t·ª´ JSON data",
            "expect_json": True
        },
        {
            "question": "Marshal n√†o ƒë∆∞·ª£c g·ªçi l√† t∆∞·ªõng d≈©ng c·∫£m nh·∫•t?",
            "description": "H·ªèi v·ªÅ Marshal t·ª´ JSON data",
            "expect_json": True
        },
        {
            "question": "Garde Imp√©riale l√† g√¨?",
            "description": "H·ªèi v·ªÅ V·ªá binh Ho√†ng gia t·ª´ JSON data",
            "expect_json": True
        },
        {
            "question": "Chi·∫øn d·ªãch Nga di·ªÖn ra nƒÉm n√†o?",
            "description": "H·ªèi v·ªÅ s·ª± ki·ªán trong timeline JSON",
            "expect_json": True
        }
    ]
    
    print("üìä Testing JSON Data Integration")
    print("=" * 50)
    
    success_count = 0
    total_count = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç Test {i}: {test_case['description']}")
        print(f"Question: '{test_case['question']}'")
        
        try:
            response = requests.post(
                f"{base_url}/query",
                json={
                    "question": test_case["question"],
                    "mode": "mix",
                    "top_k": 5
                },
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get("answer", "No answer")
                
                # Truncate long answers
                display_answer = answer[:200] + "..." if len(answer) > 200 else answer
                
                print(f"‚úÖ Status: {response.status_code}")
                print(f"Answer: {display_answer}")
                print(f"Mode: {data.get('mode', 'unknown')}")
                
                # Check answer quality
                if "[no-context]" in answer:
                    print("‚ö†Ô∏è  Warning: No context found")
                elif len(answer.strip()) < 20:
                    print("‚ö†Ô∏è  Warning: Very short answer") 
                else:
                    print("‚úÖ Good answer received")
                    success_count += 1
                    
                # Check if answer contains JSON-specific information
                json_indicators = [
                    "1805", "Austerlitz", "Michel Ney", "Garde Imp√©riale", 
                    "Marshal", "1812", "Borodino", "Leipzig", "t∆∞·ªõng th·∫ßn c·∫≠n",
                    "V·ªá binh Ho√†ng gia", "Jean Lannes", "d≈©ng c·∫£m nh·∫•t"
                ]
                
                has_json_info = any(indicator in answer for indicator in json_indicators)
                if has_json_info and test_case["expect_json"]:
                    print("üéØ Contains JSON-specific information")
                elif test_case["expect_json"]:
                    print("‚ö†Ô∏è  May not contain JSON-specific information")
                    
            else:
                print(f"‚ùå Error: Status {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Exception: {e}")
        
        print("-" * 40)
    
    print(f"\nüèÅ JSON Data Test Results: {success_count}/{total_count} tests successful")
    
    if success_count == total_count:
        print("üéâ All JSON data tests passed!")
    elif success_count > total_count * 0.7:
        print("‚úÖ Most JSON data tests passed!")
    else:
        print("‚ö†Ô∏è  Some JSON data tests failed - check data integration")

if __name__ == "__main__":
    test_json_data_queries()
